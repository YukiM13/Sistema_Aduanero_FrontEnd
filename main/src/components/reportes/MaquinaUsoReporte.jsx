import React, {useEffect, useState} from 'react';
import axios from 'axios';

import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";
import Grid from "@mui/material/Grid";
import Button from "@mui/material/Button";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import { AlignHorizontalRight, Margin, PrintSharp } from "@mui/icons-material";
import Box from "@mui/material/Box";

import html2pdf from "html2pdf.js";

import { storage } from '../../layouts/config/firebaseConfig';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import QRCode from 'qrcode';

import { duration } from "@mui/material";
import { any } from 'prop-types';


import {
  Table, TableBody, TableCell, TableContainer,
  TableHead, TableRow, Paper, CircularProgress, MenuItem
} from '@mui/material';
import { useFormik } from 'formik';
import SaveIcon from '@mui/icons-material/Save';
import Breadcrumb from '../../layouts/full/shared/breadcrumb/Breadcrumb';
import ParentCard from '../../components/shared/ParentCard';
import { IconPrinter } from '@tabler/icons';
import CustomFormLabel from '../forms/theme-elements/CustomFormLabel';
import CustomTextField from '../forms/theme-elements/CustomTextField';
import { Search } from '@mui/icons-material';
import declaracionvalor from '../../models/devaspendientesModel.js'

import { ReactComponent as LogoAzul } from 'src/assets/images/logos/LOGOAZUL.svg'; // Importar como componente
import LogoAzulUrl from 'src/assets/images/logos/LOGOAZUL.svg'; // Importar como componente
import LogoAzulPNG from 'src/assets/images/logos/LOGOAZULPNG.png'; // Importar como componente
import { set } from 'lodash';

const MaquinaUsoReporte = ()=>{

    const [datos, setDatos] = useState({fecha_inicio: new Date(), fecha_fin: new Date()}) ;
    // const [fechaInicio, setFechaInicio] = useState(new Date());
    // const [fechaFin, setFechaFin] = useState(new Date());
    const [modu_Id, setModu_Id] = useState(0);
    const [moduSeleccionado, setModuSeleccionado] = useState('');
    const [modulos, setModulos] = useState([]);


    const LogoAzulSVGCode = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="180px" height="77px" viewBox="0 0 180 77" version="1.1">
<defs>
<g>
<symbol overflow="visible" id="glyph0-0">
<path style="stroke:none;" d="M 2.21875 0 L 2.21875 -10.5625 L 11.0625 -10.5625 L 11.0625 0 Z M 2.484375 -0.265625 L 10.78125 -0.265625 L 10.78125 -10.296875 L 2.484375 -10.296875 Z M 2.484375 -0.265625 "/>
</symbol>
<symbol overflow="visible" id="glyph0-1">
<path style="stroke:none;" d="M 0.6875 0 L 3.34375 -12.109375 L 12.203125 -12.109375 L 11.75 -10.078125 L 5.5 -10.078125 L 4.859375 -7.171875 L 11 -7.171875 L 10.546875 -5.15625 L 4.421875 -5.15625 L 3.296875 0 Z M 0.6875 0 "/>
</symbol>
<symbol overflow="visible" id="glyph0-2">
<path style="stroke:none;" d="M 3.390625 0 L 0.78125 0 L 3.421875 -12.109375 L 9.046875 -12.109375 C 10.015625 -12.109375 10.765625 -12.007812 11.296875 -11.8125 C 11.835938 -11.625 12.273438 -11.273438 12.609375 -10.765625 C 12.941406 -10.265625 13.109375 -9.65625 13.109375 -8.9375 C 13.109375 -7.90625 12.785156 -7.050781 12.140625 -6.375 C 11.492188 -5.707031 10.519531 -5.296875 9.21875 -5.140625 C 9.550781 -4.859375 9.863281 -4.484375 10.15625 -4.015625 C 10.738281 -3.066406 11.382812 -1.726562 12.09375 0 L 9.296875 0 C 9.078125 -0.6875 8.640625 -1.75 7.984375 -3.1875 C 7.617188 -3.96875 7.238281 -4.492188 6.84375 -4.765625 C 6.59375 -4.929688 6.160156 -5.015625 5.546875 -5.015625 L 4.484375 -5.015625 Z M 4.875 -6.828125 L 6.265625 -6.828125 C 7.660156 -6.828125 8.585938 -6.90625 9.046875 -7.0625 C 9.503906 -7.226562 9.863281 -7.476562 10.125 -7.8125 C 10.382812 -8.15625 10.515625 -8.515625 10.515625 -8.890625 C 10.515625 -9.328125 10.328125 -9.65625 9.953125 -9.875 C 9.722656 -10.007812 9.222656 -10.078125 8.453125 -10.078125 L 5.59375 -10.078125 Z M 4.875 -6.828125 "/>
</symbol>
<symbol overflow="visible" id="glyph0-3">
<path style="stroke:none;" d="M 1.546875 -4.75 C 1.546875 -5.457031 1.65625 -6.210938 1.875 -7.015625 C 2.175781 -8.078125 2.625 -9 3.21875 -9.78125 C 3.820312 -10.5625 4.582031 -11.175781 5.5 -11.625 C 6.414062 -12.082031 7.457031 -12.3125 8.625 -12.3125 C 10.195312 -12.3125 11.460938 -11.84375 12.421875 -10.90625 C 13.390625 -9.976562 13.875 -8.75 13.875 -7.21875 C 13.875 -5.9375 13.554688 -4.695312 12.921875 -3.5 C 12.296875 -2.3125 11.441406 -1.394531 10.359375 -0.75 C 9.285156 -0.101562 8.070312 0.21875 6.71875 0.21875 C 5.539062 0.21875 4.550781 -0.0351562 3.75 -0.546875 C 2.945312 -1.066406 2.378906 -1.703125 2.046875 -2.453125 C 1.710938 -3.210938 1.546875 -3.976562 1.546875 -4.75 Z M 4.125 -4.796875 C 4.125 -3.960938 4.382812 -3.265625 4.90625 -2.703125 C 5.4375 -2.140625 6.132812 -1.859375 7 -1.859375 C 7.707031 -1.859375 8.382812 -2.078125 9.03125 -2.515625 C 9.675781 -2.960938 10.207031 -3.632812 10.625 -4.53125 C 11.050781 -5.4375 11.265625 -6.316406 11.265625 -7.171875 C 11.265625 -8.128906 11 -8.878906 10.46875 -9.421875 C 9.9375 -9.960938 9.253906 -10.234375 8.421875 -10.234375 C 7.148438 -10.234375 6.113281 -9.664062 5.3125 -8.53125 C 4.519531 -7.394531 4.125 -6.148438 4.125 -4.796875 Z M 4.125 -4.796875 "/>
</symbol>
<symbol overflow="visible" id="glyph0-4">
<path style="stroke:none;" d="M 10.84375 0 L 8.421875 0 L 5 -8.125 L 3.21875 0 L 0.796875 0 L 3.4375 -12.109375 L 5.875 -12.109375 L 9.296875 -4 L 11.078125 -12.109375 L 13.484375 -12.109375 Z M 10.84375 0 "/>
</symbol>
<symbol overflow="visible" id="glyph0-5">
<path style="stroke:none;" d="M 6.234375 0 L 3.625 0 L 5.84375 -10.078125 L 2.125 -10.078125 L 2.5625 -12.109375 L 12.546875 -12.109375 L 12.09375 -10.078125 L 8.4375 -10.078125 Z M 6.234375 0 "/>
</symbol>
<symbol overflow="visible" id="glyph0-6">
<path style="stroke:none;" d="M 0.609375 0 L 3.265625 -12.109375 L 5.859375 -12.109375 L 3.21875 0 Z M 0.609375 0 "/>
</symbol>
<symbol overflow="visible" id="glyph0-7">
<path style="stroke:none;" d="M 0.71875 0 L 3.375 -12.109375 L 12.75 -12.109375 L 12.3125 -10.078125 L 5.53125 -10.078125 L 4.9375 -7.328125 L 11.484375 -7.328125 L 11.046875 -5.3125 L 4.484375 -5.3125 L 3.703125 -2.015625 L 11.0625 -2.015625 L 10.609375 0 Z M 0.71875 0 "/>
</symbol>
<symbol overflow="visible" id="glyph1-0">
<path style="stroke:none;" d="M 2.125 0 L 2.125 -10.5625 L 10.640625 -10.5625 L 10.640625 0 Z M 2.390625 -0.265625 L 10.375 -0.265625 L 10.375 -10.296875 L 2.390625 -10.296875 Z M 2.390625 -0.265625 "/>
</symbol>
<symbol overflow="visible" id="glyph1-1">
<path style="stroke:none;" d="M 0.765625 0 L 3.3125 -12.109375 L 5.8125 -12.109375 L 3.703125 -2.015625 L 9.890625 -2.015625 L 9.46875 0 Z M 0.765625 0 "/>
</symbol>
<symbol overflow="visible" id="glyph1-2">
<path style="stroke:none;" d="M 1.484375 -4.75 C 1.484375 -5.457031 1.59375 -6.210938 1.8125 -7.015625 C 2.09375 -8.078125 2.519531 -9 3.09375 -9.78125 C 3.675781 -10.5625 4.40625 -11.175781 5.28125 -11.625 C 6.164062 -12.082031 7.171875 -12.3125 8.296875 -12.3125 C 9.804688 -12.3125 11.023438 -11.84375 11.953125 -10.90625 C 12.878906 -9.976562 13.34375 -8.75 13.34375 -7.21875 C 13.34375 -5.9375 13.039062 -4.695312 12.4375 -3.5 C 11.832031 -2.3125 11.007812 -1.394531 9.96875 -0.75 C 8.9375 -0.101562 7.769531 0.21875 6.46875 0.21875 C 5.332031 0.21875 4.378906 -0.0351562 3.609375 -0.546875 C 2.835938 -1.066406 2.289062 -1.703125 1.96875 -2.453125 C 1.644531 -3.210938 1.484375 -3.976562 1.484375 -4.75 Z M 3.96875 -4.796875 C 3.96875 -3.960938 4.21875 -3.265625 4.71875 -2.703125 C 5.226562 -2.140625 5.898438 -1.859375 6.734375 -1.859375 C 7.410156 -1.859375 8.0625 -2.078125 8.6875 -2.515625 C 9.3125 -2.960938 9.828125 -3.632812 10.234375 -4.53125 C 10.640625 -5.4375 10.84375 -6.316406 10.84375 -7.171875 C 10.84375 -8.128906 10.582031 -8.878906 10.0625 -9.421875 C 9.550781 -9.960938 8.894531 -10.234375 8.09375 -10.234375 C 6.875 -10.234375 5.878906 -9.664062 5.109375 -8.53125 C 4.347656 -7.394531 3.96875 -6.148438 3.96875 -4.796875 Z M 3.96875 -4.796875 "/>
</symbol>
<symbol overflow="visible" id="glyph1-3">
<path style="stroke:none;" d="M 7.484375 -6.46875 L 12.921875 -6.46875 L 11.828125 -1.265625 C 11.191406 -0.859375 10.40625 -0.507812 9.46875 -0.21875 C 8.53125 0.0625 7.578125 0.203125 6.609375 0.203125 C 5.109375 0.203125 3.957031 -0.132812 3.15625 -0.8125 C 2.050781 -1.738281 1.5 -3.078125 1.5 -4.828125 C 1.5 -6.003906 1.734375 -7.132812 2.203125 -8.21875 C 2.773438 -9.507812 3.582031 -10.515625 4.625 -11.234375 C 5.664062 -11.953125 6.890625 -12.3125 8.296875 -12.3125 C 9.703125 -12.3125 10.828125 -11.984375 11.671875 -11.328125 C 12.523438 -10.679688 13.09375 -9.738281 13.375 -8.5 L 11.03125 -8.234375 C 10.820312 -8.910156 10.488281 -9.421875 10.03125 -9.765625 C 9.582031 -10.117188 9.007812 -10.296875 8.3125 -10.296875 C 7.507812 -10.296875 6.769531 -10.085938 6.09375 -9.671875 C 5.414062 -9.253906 4.882812 -8.609375 4.5 -7.734375 C 4.125 -6.859375 3.9375 -5.898438 3.9375 -4.859375 C 3.9375 -3.835938 4.164062 -3.082031 4.625 -2.59375 C 5.09375 -2.113281 5.773438 -1.875 6.671875 -1.875 C 7.210938 -1.875 7.765625 -1.945312 8.328125 -2.09375 C 8.890625 -2.25 9.375 -2.429688 9.78125 -2.640625 L 10.15625 -4.4375 L 7.046875 -4.4375 Z M 7.484375 -6.46875 "/>
</symbol>
<symbol overflow="visible" id="glyph1-4">
<path style="stroke:none;" d="M 0.59375 0 L 3.140625 -12.109375 L 5.640625 -12.109375 L 3.09375 0 Z M 0.59375 0 "/>
</symbol>
<symbol overflow="visible" id="glyph1-5">
<path style="stroke:none;" d="M 1.078125 -3.921875 L 3.46875 -4.046875 C 3.5 -3.285156 3.628906 -2.773438 3.859375 -2.515625 C 4.222656 -2.085938 4.894531 -1.875 5.875 -1.875 C 6.695312 -1.875 7.289062 -2.019531 7.65625 -2.3125 C 8.019531 -2.601562 8.203125 -2.957031 8.203125 -3.375 C 8.203125 -3.726562 8.054688 -4.03125 7.765625 -4.28125 C 7.546875 -4.457031 6.960938 -4.75 6.015625 -5.15625 C 5.078125 -5.5625 4.390625 -5.898438 3.953125 -6.171875 C 3.523438 -6.453125 3.1875 -6.804688 2.9375 -7.234375 C 2.6875 -7.671875 2.5625 -8.179688 2.5625 -8.765625 C 2.5625 -9.785156 2.929688 -10.628906 3.671875 -11.296875 C 4.410156 -11.972656 5.484375 -12.3125 6.890625 -12.3125 C 8.328125 -12.3125 9.4375 -11.976562 10.21875 -11.3125 C 11 -10.644531 11.425781 -9.757812 11.5 -8.65625 L 9.109375 -8.546875 C 9.046875 -9.117188 8.832031 -9.554688 8.46875 -9.859375 C 8.113281 -10.171875 7.582031 -10.328125 6.875 -10.328125 C 6.1875 -10.328125 5.691406 -10.207031 5.390625 -9.96875 C 5.097656 -9.726562 4.953125 -9.425781 4.953125 -9.0625 C 4.953125 -8.707031 5.085938 -8.421875 5.359375 -8.203125 C 5.628906 -7.960938 6.226562 -7.644531 7.15625 -7.25 C 8.5625 -6.644531 9.457031 -6.15625 9.84375 -5.78125 C 10.40625 -5.238281 10.6875 -4.535156 10.6875 -3.671875 C 10.6875 -2.597656 10.257812 -1.679688 9.40625 -0.921875 C 8.5625 -0.171875 7.378906 0.203125 5.859375 0.203125 C 4.816406 0.203125 3.910156 0.03125 3.140625 -0.3125 C 2.378906 -0.664062 1.835938 -1.148438 1.515625 -1.765625 C 1.203125 -2.390625 1.054688 -3.109375 1.078125 -3.921875 Z M 1.078125 -3.921875 "/>
</symbol>
<symbol overflow="visible" id="glyph1-6">
<path style="stroke:none;" d="M 6 0 L 3.484375 0 L 5.609375 -10.078125 L 2.046875 -10.078125 L 2.46875 -12.109375 L 12.0625 -12.109375 L 11.640625 -10.078125 L 8.125 -10.078125 Z M 6 0 "/>
</symbol>
<symbol overflow="visible" id="glyph1-7">
<path style="stroke:none;" d="M 9.515625 -4.359375 L 12.046875 -3.984375 C 11.554688 -2.617188 10.816406 -1.578125 9.828125 -0.859375 C 8.835938 -0.140625 7.679688 0.21875 6.359375 0.21875 C 4.867188 0.21875 3.703125 -0.222656 2.859375 -1.109375 C 2.023438 -2.003906 1.609375 -3.300781 1.609375 -5 C 1.609375 -6.375 1.890625 -7.628906 2.453125 -8.765625 C 3.015625 -9.910156 3.796875 -10.785156 4.796875 -11.390625 C 5.796875 -12.003906 6.878906 -12.3125 8.046875 -12.3125 C 9.367188 -12.3125 10.4375 -11.957031 11.25 -11.25 C 12.0625 -10.550781 12.539062 -9.597656 12.6875 -8.390625 L 10.28125 -8.15625 C 10.15625 -8.863281 9.898438 -9.375 9.515625 -9.6875 C 9.140625 -10 8.632812 -10.15625 8 -10.15625 C 7.3125 -10.15625 6.664062 -9.945312 6.0625 -9.53125 C 5.457031 -9.113281 4.972656 -8.457031 4.609375 -7.5625 C 4.253906 -6.675781 4.078125 -5.789062 4.078125 -4.90625 C 4.078125 -3.9375 4.3125 -3.1875 4.78125 -2.65625 C 5.25 -2.132812 5.832031 -1.875 6.53125 -1.875 C 7.175781 -1.875 7.769531 -2.082031 8.3125 -2.5 C 8.851562 -2.914062 9.253906 -3.535156 9.515625 -4.359375 Z M 9.515625 -4.359375 "/>
</symbol>
</g>
</defs>
<g id="surface1">
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,21.960784%,34.901962%);fill-opacity:1;" d="M 36.191406 39.46875 L 34.332031 37.320312 C 34.136719 37.085938 33.921875 36.863281 33.726562 36.625 C 33.300781 35.988281 32.628906 35.5625 31.875 35.445312 C 31.4375 35.433594 31 35.5 30.582031 35.644531 C 29.722656 35.886719 28.882812 36.171875 27.980469 36.460938 C 27.949219 36.347656 27.933594 36.230469 27.917969 36.109375 C 27.894531 34.8125 27.886719 33.515625 27.835938 32.21875 C 27.835938 31.914062 27.925781 31.832031 28.195312 31.832031 C 30.054688 31.832031 31.914062 31.808594 33.777344 31.832031 C 34.320312 31.847656 34.839844 32.074219 35.21875 32.464844 C 35.773438 32.988281 36.179688 33.652344 36.398438 34.382812 L 36.839844 34.382812 C 37.988281 34.410156 39.132812 34.429688 40.285156 34.476562 C 41.132812 34.511719 41.785156 34.859375 42.019531 35.757812 C 42.105469 36.105469 42.238281 36.445312 42.324219 36.789062 C 42.339844 36.980469 42.503906 37.121094 42.6875 37.109375 C 42.710938 37.109375 42.738281 37.101562 42.757812 37.09375 C 42.992188 37.058594 43.269531 37.09375 43.320312 36.742188 C 43.320312 36.730469 43.320312 36.71875 43.320312 36.707031 C 43.335938 35.804688 43.09375 34.917969 42.613281 34.15625 C 42.191406 33.511719 41.464844 33.136719 40.699219 33.160156 C 39.777344 33.125 38.855469 33.160156 37.933594 33.101562 C 37.761719 33.058594 37.609375 32.957031 37.503906 32.816406 C 37.027344 32.308594 36.597656 31.75 36.101562 31.285156 C 35.414062 30.609375 34.523438 30.515625 33.609375 30.46875 C 31.945312 30.382812 30.277344 30.277344 28.636719 30.191406 C 28.128906 30.144531 27.613281 30.144531 27.109375 30.191406 C 26.710938 30.273438 26.324219 30.402344 25.957031 30.574219 L 22.644531 31.871094 C 22.621094 31.871094 22.589844 31.871094 22.566406 31.871094 L 22.566406 28.09375 C 22.566406 27.519531 22.605469 26.941406 22.605469 26.355469 C 22.582031 26.167969 22.699219 25.984375 22.882812 25.933594 C 24.792969 25.128906 26.730469 24.300781 28.65625 23.496094 C 30.648438 22.667969 32.648438 21.859375 34.640625 21.035156 C 36.382812 20.308594 38.125 19.566406 39.871094 18.84375 C 41.617188 18.121094 43.277344 17.464844 44.976562 16.769531 C 45.429688 16.535156 45.894531 16.332031 46.371094 16.15625 C 47.273438 15.910156 48.1875 16.082031 49.074219 16.261719 C 50.988281 16.644531 52.902344 17.109375 54.8125 17.46875 C 56.558594 17.796875 58.320312 18.027344 60.078125 18.300781 C 60.347656 18.320312 60.613281 18.378906 60.859375 18.476562 C 61.113281 18.601562 61.332031 18.796875 61.488281 19.035156 C 61.675781 19.40625 61.832031 19.792969 61.945312 20.195312 C 61.988281 20.371094 62.148438 20.496094 62.328125 20.492188 C 63.667969 20.621094 65.007812 20.757812 66.34375 20.914062 C 66.773438 20.964844 67.199219 21.058594 67.609375 21.1875 C 68.355469 21.421875 68.582031 22.050781 68.722656 22.722656 C 68.914062 23.671875 69.152344 24.621094 69.335938 25.570312 C 69.394531 25.914062 69.421875 26.257812 69.40625 26.601562 C 69.375 28.136719 69.324219 29.714844 69.273438 31.273438 C 69.273438 31.53125 69.230469 31.789062 69.210938 32.066406 C 68.75 32.035156 68.898438 32.382812 68.828125 32.644531 C 69.226562 32.6875 69.261719 32.902344 69.210938 33.273438 C 69.109375 33.96875 69.105469 34.675781 69.0625 35.441406 L 72.476562 35.1875 C 72.324219 35.722656 72.191406 36.21875 72.039062 36.722656 C 71.808594 37.492188 71.558594 38.21875 71.339844 38.972656 C 70.898438 40.464844 70.574219 41.996094 69.8125 43.367188 C 69.136719 44.578125 68.46875 45.796875 67.71875 46.960938 C 67.246094 47.597656 66.738281 48.199219 66.191406 48.769531 C 66.074219 48.910156 65.980469 49.066406 65.867188 49.203125 C 65.300781 49.882812 64.742188 50.5625 64.160156 51.226562 C 63.847656 51.585938 63.496094 51.914062 63.125 52.296875 L 70.398438 54.082031 L 70.398438 54.121094 L 5.480469 54.121094 L 5.480469 54.0625 L 11.289062 52.613281 C 10.296875 52.363281 9.332031 52.160156 8.386719 51.882812 C 7.398438 51.632812 6.429688 51.316406 5.484375 50.933594 C 4.507812 50.449219 3.558594 49.917969 2.636719 49.332031 C 2.492188 49.222656 2.367188 49.09375 2.253906 48.949219 C 1.417969 48.1875 0.792969 47.230469 0.429688 46.160156 C -0.0664062 44.777344 -0.113281 43.273438 0.292969 41.863281 C 0.550781 40.953125 0.917969 40.082031 1.382812 39.261719 C 2.070312 38.074219 2.839844 36.9375 3.675781 35.847656 C 4.441406 34.859375 5.324219 33.972656 6.15625 33.042969 C 6.769531 32.359375 7.351562 31.636719 8.023438 31.007812 C 9.273438 29.855469 10.566406 28.707031 11.847656 27.609375 C 12.847656 26.75 13.859375 25.90625 14.910156 25.101562 C 15.734375 24.460938 16.613281 23.882812 17.457031 23.273438 C 17.875 22.972656 18.257812 22.632812 18.675781 22.339844 C 20.054688 21.371094 21.429688 20.386719 22.84375 19.457031 C 24.257812 18.527344 25.746094 17.589844 27.226562 16.710938 C 28.785156 15.785156 30.371094 14.902344 31.96875 14.023438 C 33.222656 13.339844 34.511719 12.71875 35.792969 12.074219 C 35.96875 11.984375 36.160156 11.9375 36.355469 11.9375 C 36.292969 12.027344 36.253906 12.140625 36.171875 12.199219 C 35.226562 12.847656 34.261719 13.480469 33.3125 14.117188 C 32.671875 14.546875 32.039062 14.980469 31.398438 15.402344 C 30.113281 16.300781 28.796875 17.136719 27.507812 18.007812 C 26.867188 18.433594 26.269531 18.914062 25.664062 19.382812 C 24.515625 20.277344 23.371094 21.167969 22.21875 22.070312 C 21.429688 22.703125 20.691406 23.363281 19.882812 23.992188 C 19.03125 24.667969 18.15625 25.3125 17.316406 25.992188 C 16.644531 26.507812 16.007812 27.0625 15.402344 27.652344 C 14.554688 28.507812 13.753906 29.402344 12.996094 30.34375 C 12.207031 31.324219 11.464844 32.359375 10.769531 33.414062 C 10.324219 34.078125 9.984375 34.8125 9.5625 35.492188 C 8.734375 36.824219 8.089844 38.265625 7.652344 39.769531 C 7.253906 41.070312 7.308594 42.46875 7.808594 43.738281 C 8.320312 45.039062 9.335938 45.828125 10.535156 46.449219 C 12.035156 47.21875 13.65625 47.34375 15.285156 47.339844 C 16.050781 47.324219 16.808594 47.214844 17.546875 47.007812 C 18.902344 46.644531 20.222656 46.191406 21.570312 45.765625 C 23.613281 45.117188 25.664062 44.457031 27.722656 43.789062 C 29.445312 43.222656 31.167969 42.636719 32.882812 42.078125 C 33.78125 41.785156 34.6875 41.527344 35.523438 41.273438 C 34.855469 41.105469 34.101562 40.890625 33.347656 40.730469 C 33.246094 40.714844 33.144531 40.730469 33.054688 40.769531 C 29.785156 41.792969 26.527344 42.824219 23.261719 43.84375 C 21.269531 44.457031 19.273438 45.042969 17.28125 45.640625 C 16.84375 45.769531 16.414062 45.921875 15.917969 46.082031 C 15.945312 45.71875 15.972656 45.40625 15.996094 45.09375 C 16.0625 44.300781 16.144531 43.511719 16.199219 42.710938 C 16.199219 42.472656 16.324219 42.394531 16.527344 42.328125 C 18.472656 41.691406 20.40625 41.042969 22.347656 40.40625 C 24.75 39.640625 27.152344 38.847656 29.558594 38.070312 C 30.019531 37.921875 30.488281 37.796875 30.945312 37.628906 C 31.453125 37.460938 32.007812 37.554688 32.433594 37.882812 C 33.273438 38.378906 34.023438 39.007812 34.652344 39.75 C 34.726562 39.808594 34.816406 39.835938 34.910156 39.824219 C 35.292969 39.761719 35.675781 39.679688 36.078125 39.605469 L 36.191406 39.457031 Z M 55.171875 20.953125 L 67.078125 22.359375 C 67.023438 21.890625 66.730469 21.875 66.429688 21.84375 C 65.222656 21.738281 64.015625 21.71875 62.804688 21.488281 C 62.199219 21.351562 61.660156 21.015625 61.277344 20.523438 C 61.050781 20.257812 60.730469 20.085938 60.378906 20.050781 C 59.144531 19.851562 57.914062 19.621094 56.671875 19.46875 C 55.71875 19.347656 54.757812 19.292969 53.800781 19.296875 C 52.933594 19.296875 52.066406 19.460938 51.203125 19.550781 C 50.769531 19.589844 50.328125 19.609375 49.90625 19.683594 C 49.75 19.710938 49.519531 19.863281 49.492188 19.984375 C 49.285156 20.960938 49.152344 21.945312 49.085938 22.941406 C 49.027344 25.402344 49.085938 27.859375 49.085938 30.324219 L 49.085938 30.746094 L 49.429688 30.746094 C 50.167969 30.746094 50.910156 30.792969 51.644531 30.894531 C 52.808594 31.128906 53.195312 31.5625 53.402344 32.894531 C 53.601562 34.167969 53.785156 35.441406 53.957031 36.707031 C 55.515625 36.890625 57.015625 36.660156 58.542969 36.515625 C 60.328125 36.34375 62.121094 36.210938 63.902344 36.058594 C 65.019531 35.960938 66.144531 35.859375 67.269531 35.753906 C 67.351562 35.753906 67.433594 35.722656 67.5 35.667969 C 67.8125 35.410156 67.917969 34.972656 67.753906 34.601562 L 67.113281 34.601562 C 66.773438 34.144531 66.949219 33.671875 67.148438 33.277344 C 67.238281 33.089844 67.636719 33.054688 67.886719 32.957031 L 68.042969 32.144531 C 67.347656 32.113281 66.648438 32.0625 65.949219 32.039062 C 63.695312 31.976562 61.4375 31.945312 59.175781 31.875 C 57.933594 31.835938 57.933594 31.8125 57.605469 30.621094 C 57.523438 30.3125 57.417969 30.011719 57.34375 29.699219 C 57.273438 29.386719 57.253906 29.09375 57.207031 28.773438 L 57.445312 28.773438 L 60.945312 28.878906 C 63.179688 28.953125 65.414062 29.027344 67.644531 29.113281 C 67.980469 29.113281 68.257812 29.085938 68.289062 28.703125 C 68.320312 28.238281 68.289062 27.765625 68.289062 27.300781 C 67.109375 27.234375 65.929688 27.175781 64.753906 27.101562 C 62.875 26.976562 60.992188 26.851562 59.113281 26.714844 C 58.273438 26.652344 57.433594 26.539062 56.59375 26.507812 C 56.070312 26.507812 55.988281 26.148438 55.925781 25.773438 C 55.675781 24.179688 55.445312 22.601562 55.175781 20.953125 Z M 50.113281 40.707031 L 42.371094 40.707031 C 41.429688 44.246094 40.484375 47.777344 39.535156 51.367188 L 42.59375 51.367188 C 42.675781 51.367188 42.796875 51.230469 42.828125 51.132812 C 43.121094 50.160156 43.390625 49.179688 43.691406 48.210938 C 43.875 47.613281 43.964844 47.566406 44.589844 47.585938 L 47.210938 47.652344 C 47.59375 47.652344 47.933594 47.675781 48.078125 47.207031 C 48.265625 46.585938 48.515625 45.980469 48.757812 45.308594 L 44.261719 45.308594 L 45.027344 43.03125 L 49.496094 43.03125 C 49.703125 42.234375 49.910156 41.484375 50.113281 40.703125 Z M 49.214844 51.34375 L 57.28125 51.34375 C 57.492188 50.523438 57.703125 49.714844 57.929688 48.851562 L 53.121094 48.851562 L 55.417969 40.691406 L 52.296875 40.691406 C 52.199219 40.691406 52.066406 40.851562 52.023438 40.964844 C 51.824219 41.582031 51.640625 42.203125 51.472656 42.824219 C 51.066406 44.273438 50.652344 45.71875 50.265625 47.171875 C 50.078125 47.875 49.945312 48.59375 49.769531 49.300781 C 49.59375 50.003906 49.402344 50.660156 49.214844 51.34375 Z M 13.015625 28.957031 L 12.96875 28.890625 C 12.488281 29.300781 11.984375 29.683594 11.527344 30.125 C 10.863281 30.78125 10.230469 31.472656 9.617188 32.164062 C 8.769531 33.085938 7.898438 33.984375 7.125 34.957031 C 6.425781 35.832031 5.832031 36.792969 5.1875 37.71875 C 5.117188 37.824219 5.0625 37.945312 4.984375 38.042969 C 4.277344 38.925781 3.738281 39.929688 3.40625 41.011719 C 3.300781 41.371094 3.203125 41.730469 3.113281 42.085938 C 2.773438 43.414062 2.511719 44.773438 3.175781 46.035156 C 3.65625 46.90625 4.214844 47.722656 4.855469 48.484375 C 5.191406 48.886719 5.609375 49.207031 6.085938 49.425781 C 7.699219 50.207031 9.417969 50.75 11.1875 51.023438 C 11.871094 51.125 12.554688 51.167969 13.242188 51.230469 C 12.894531 51.078125 12.535156 50.953125 12.171875 50.847656 C 10.511719 50.269531 8.894531 49.554688 7.351562 48.703125 C 6.050781 47.964844 5.144531 46.675781 4.894531 45.191406 C 4.59375 43.835938 4.628906 42.421875 4.996094 41.085938 C 5.277344 40 5.699219 38.953125 6.246094 37.976562 C 6.890625 36.734375 7.644531 35.550781 8.496094 34.441406 C 9.167969 33.632812 9.753906 32.757812 10.371094 31.914062 C 10.425781 31.847656 10.472656 31.765625 10.53125 31.699219 L 13.019531 28.953125 Z M 49.074219 35.578125 C 49.074219 36.644531 49.074219 36.707031 49.625 37.367188 C 49.921875 37.75 50.703125 37.808594 50.992188 37.441406 C 51.292969 37.101562 51.515625 36.703125 51.644531 36.261719 C 51.871094 35.359375 51.703125 34.398438 51.179688 33.628906 C 50.949219 33.3125 50.222656 33.1875 49.988281 33.472656 C 49.480469 34.085938 48.933594 34.714844 49.070312 35.582031 Z M 47.246094 33.625 L 47.246094 33.273438 C 47.246094 31.742188 47.246094 30.203125 47.222656 28.644531 C 47.195312 26.308594 47.179688 23.984375 47.121094 21.652344 C 47.097656 20.550781 46.976562 19.453125 46.902344 18.351562 C 46.898438 18.316406 46.886719 18.28125 46.871094 18.246094 L 46.789062 18.296875 L 46.789062 33.296875 L 44.914062 33.480469 L 44.914062 33.601562 L 47.246094 33.621094 Z M 47.246094 33.625 "/>
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,21.960784%,34.901962%);fill-opacity:1;" d="M 53.53125 16.25 C 53.269531 15.246094 53.027344 14.304688 52.761719 13.367188 C 52.484375 12.292969 52.203125 11.222656 51.910156 10.15625 C 51.816406 9.804688 51.550781 9.945312 51.347656 10.015625 C 50.828125 10.210938 50.316406 10.460938 49.777344 10.632812 C 48.183594 11.15625 46.648438 11.894531 44.964844 12.167969 C 43.75 12.414062 42.507812 12.53125 41.265625 12.511719 C 40.472656 12.480469 39.679688 12.394531 38.898438 12.253906 C 38.414062 12.136719 37.953125 11.9375 37.539062 11.667969 C 36.523438 11.046875 35.546875 10.371094 34.539062 9.75 C 33.535156 9.128906 32.628906 8.59375 31.625 7.960938 L 33.324219 7.277344 C 33.375 7.277344 33.4375 7.277344 33.46875 7.242188 C 33.960938 6.859375 34.449219 7.054688 34.941406 7.242188 L 39.824219 9.054688 C 40.136719 9.171875 40.445312 9.289062 40.761719 9.382812 C 40.867188 9.414062 40.976562 9.414062 41.078125 9.382812 C 42.152344 8.902344 43.222656 8.417969 44.292969 7.933594 L 46.53125 6.933594 L 36.300781 2.703125 C 36.535156 2.597656 36.746094 2.5 36.953125 2.398438 C 37.492188 2.132812 38.03125 1.875 38.566406 1.597656 C 39.078125 1.3125 39.675781 1.238281 40.246094 1.386719 C 43.746094 2.222656 47.265625 3.007812 50.761719 3.863281 C 51.542969 4.113281 52.390625 4.035156 53.113281 3.652344 C 54.75 2.765625 56.453125 2 58.128906 1.183594 C 58.746094 0.839844 59.386719 0.53125 60.039062 0.261719 C 60.597656 0.0976562 61.175781 0.0078125 61.757812 -0.00390625 C 61.980469 -0.00390625 62.214844 0.160156 62.449219 0.253906 L 62.472656 0.40625 C 62.054688 0.679688 61.644531 0.972656 61.214844 1.230469 C 60.996094 1.363281 60.933594 1.503906 61.089844 1.722656 C 61.777344 1.414062 62.464844 1.089844 63.171875 0.8125 C 64.089844 0.453125 65.039062 0.222656 66.007812 0.628906 C 67.15625 1.101562 67.15625 1.496094 66.613281 2.496094 C 66.265625 3.015625 65.828125 3.472656 65.320312 3.835938 C 64.867188 4.214844 64.378906 4.535156 63.859375 4.796875 C 62.226562 5.617188 60.570312 6.390625 58.929688 7.175781 C 58.675781 7.292969 58.417969 7.40625 58.160156 7.523438 C 57.871094 7.625 57.644531 7.851562 57.546875 8.144531 C 57.1875 9.175781 56.707031 10.175781 56.398438 11.214844 C 56.015625 12.433594 55.800781 13.691406 55.496094 14.929688 C 55.460938 15.113281 55.363281 15.273438 55.21875 15.382812 C 54.695312 15.691406 54.105469 15.949219 53.515625 16.238281 Z M 53.53125 16.25 "/>
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,21.960784%,34.901962%);fill-opacity:1;" d="M 17.945312 40.035156 C 17.992188 38.460938 18.039062 36.933594 18.085938 35.355469 L 26.785156 32.085938 C 26.804688 32.566406 26.832031 32.917969 26.84375 33.273438 C 26.875 34.429688 26.90625 35.617188 26.949219 36.785156 C 26.949219 37.066406 26.859375 37.171875 26.589844 37.269531 C 24.835938 37.796875 23.078125 38.339844 21.332031 38.898438 C 20.210938 39.257812 19.09375 39.644531 17.949219 40.035156 Z M 17.945312 40.035156 "/>
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,21.960784%,34.901962%);fill-opacity:1;" d="M 55.171875 21.21875 C 55.433594 22.867188 55.671875 24.445312 55.9375 26.03125 C 56 26.417969 56.082031 26.746094 56.609375 26.765625 C 57.445312 26.792969 58.289062 26.910156 59.125 26.96875 C 61.007812 27.105469 62.890625 27.230469 64.769531 27.355469 C 65.941406 27.429688 67.121094 27.488281 68.300781 27.554688 C 68.300781 28.019531 68.324219 28.492188 68.300781 28.960938 C 68.277344 29.34375 67.992188 29.382812 67.65625 29.371094 C 65.421875 29.28125 63.191406 29.210938 60.957031 29.136719 C 59.808594 29.097656 58.628906 29.070312 57.457031 29.03125 C 57.378906 29.027344 57.296875 29.027344 57.21875 29.03125 C 57.265625 29.355469 57.292969 29.660156 57.355469 29.957031 C 57.421875 30.253906 57.535156 30.570312 57.617188 30.882812 C 57.945312 32.078125 57.945312 32.09375 59.1875 32.132812 C 61.449219 32.203125 63.707031 32.238281 65.964844 32.296875 C 66.664062 32.296875 67.363281 32.367188 68.054688 32.402344 L 67.902344 33.214844 C 67.648438 33.316406 67.253906 33.351562 67.160156 33.53125 C 66.960938 33.917969 66.777344 34.394531 67.125 34.859375 L 67.753906 34.859375 C 67.917969 35.230469 67.8125 35.667969 67.5 35.925781 C 67.4375 35.976562 67.351562 36.003906 67.269531 36.007812 C 66.148438 36.113281 65.023438 36.214844 63.902344 36.3125 C 62.109375 36.464844 60.320312 36.597656 58.542969 36.769531 C 57.015625 36.917969 55.515625 37.152344 53.957031 36.960938 C 53.769531 35.695312 53.601562 34.414062 53.402344 33.148438 C 53.195312 31.816406 52.808594 31.382812 51.644531 31.148438 C 50.910156 31.046875 50.167969 30.996094 49.429688 31 L 49.085938 31 L 49.085938 30.589844 C 49.085938 28.132812 49.046875 25.671875 49.085938 23.210938 C 49.152344 22.214844 49.289062 21.226562 49.492188 20.25 C 49.511719 20.128906 49.75 19.980469 49.90625 19.953125 C 50.328125 19.878906 50.769531 19.863281 51.203125 19.816406 C 52.066406 19.726562 52.933594 19.574219 53.800781 19.5625 C 54.757812 19.554688 55.71875 19.613281 56.671875 19.738281 C 57.914062 19.886719 59.148438 20.125 60.378906 20.324219 C 60.726562 20.355469 61.050781 20.523438 61.277344 20.792969 C 61.660156 21.28125 62.199219 21.625 62.804688 21.757812 C 64.015625 21.984375 65.222656 22.003906 66.429688 22.109375 C 66.730469 22.136719 67.023438 22.15625 67.078125 22.625 L 55.167969 21.21875 Z M 54.101562 21.21875 C 53.273438 21.449219 52.46875 21.691406 51.652344 21.894531 C 51.390625 21.9375 51.207031 22.171875 51.230469 22.433594 L 51.230469 25.925781 C 51.417969 25.953125 51.601562 25.988281 51.78125 26.039062 C 52.464844 26.242188 53.140625 26.472656 53.828125 26.648438 C 54.453125 26.808594 54.617188 26.648438 54.53125 26 C 54.449219 25.355469 54.367188 24.628906 54.304688 23.933594 C 54.230469 23.054688 54.167969 22.171875 54.097656 21.207031 L 54.097656 21.214844 Z M 66.386719 35.011719 L 66.488281 34.296875 C 66.625 33.410156 66.613281 33.40625 65.722656 33.394531 C 63.949219 33.371094 62.183594 33.34375 60.417969 33.308594 C 59.980469 33.308594 59.546875 33.253906 59.113281 33.246094 C 58.824219 33.246094 58.714844 33.394531 58.828125 33.667969 C 58.941406 33.941406 59.097656 34.222656 59.210938 34.507812 C 59.332031 34.835938 59.652344 35.03125 59.992188 35.003906 C 62.109375 35.003906 64.242188 35.003906 66.386719 35.003906 Z M 55.773438 35.097656 L 57.792969 35.097656 C 57.855469 35.09375 57.914062 35.070312 57.960938 35.03125 C 58.289062 34.761719 58.203125 34.382812 58.144531 34.0625 C 58.085938 33.738281 58.023438 33.175781 57.601562 33.121094 C 56.84375 33.066406 56.085938 33.058594 55.324219 33.097656 C 55.480469 33.789062 55.632812 34.457031 55.773438 35.09375 L 55.773438 35.101562 Z M 55.773438 35.097656 "/>
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,21.960784%,34.901962%);fill-opacity:1;" d="M 51.125 36.269531 C 51.003906 36.578125 50.863281 36.882812 50.703125 37.175781 C 50.578125 37.367188 50.324219 37.417969 50.136719 37.289062 C 50.089844 37.257812 50.050781 37.222656 50.023438 37.175781 C 49.679688 36.613281 49.617188 35.921875 49.855469 35.304688 C 49.984375 35.074219 50.273438 35 50.503906 35.128906 C 50.542969 35.15625 50.585938 35.1875 50.621094 35.226562 C 50.8125 35.5625 50.984375 35.910156 51.125 36.269531 Z M 51.125 36.269531 "/>
<g style="fill:rgb(0%,21.960784%,34.901962%);fill-opacity:1;">
  <use xlink:href="#glyph0-1" x="87.332031" y="33.91913"/>
  <use xlink:href="#glyph0-2" x="98.134435" y="33.91913"/>
  <use xlink:href="#glyph0-3" x="110.905623" y="33.91913"/>
  <use xlink:href="#glyph0-4" x="124.661202" y="33.91913"/>
  <use xlink:href="#glyph0-5" x="137.43239" y="33.91913"/>
  <use xlink:href="#glyph0-6" x="148.234794" y="33.91913"/>
  <use xlink:href="#glyph0-7" x="153.148118" y="33.91913"/>
  <use xlink:href="#glyph0-2" x="164.943549" y="33.91913"/>
</g>
<g style="fill:rgb(0%,21.960784%,34.901962%);fill-opacity:1;">
  <use xlink:href="#glyph1-1" x="88.027344" y="50.35663"/>
  <use xlink:href="#glyph1-2" x="98.418228" y="50.35663"/>
  <use xlink:href="#glyph1-3" x="111.649786" y="50.35663"/>
  <use xlink:href="#glyph1-4" x="124.881344" y="50.35663"/>
  <use xlink:href="#glyph1-5" x="129.607493" y="50.35663"/>
  <use xlink:href="#glyph1-6" x="140.953575" y="50.35663"/>
  <use xlink:href="#glyph1-4" x="151.344459" y="50.35663"/>
  <use xlink:href="#glyph1-7" x="156.070609" y="50.35663"/>
  <use xlink:href="#glyph1-5" x="168.355276" y="50.35663"/>
</g>
</g>
</svg>`;

    const logoAzulDataUrl = "data:image/svg+xml;utf8," + encodeURIComponent(LogoAzulSVGCode);
    const apiUrl = process.env.REACT_APP_API_URL;
    const apiKey = process.env.REACT_APP_API_KEY;

    const [consumos, setConsumos] = useState([]);

    const CargarConsumos =()=>{

      //setDatos({fecha_inicio: fechaInicio, fecha_fin: fechaFin});
      // datos.fecha_inicio = fechaInicio;
      //   datos.fecha_fin = fechaInicio;
      
      if (!modu_Id) {

        return;
        
      }
      setModuSeleccionado(modulos.find(mod=> mod.modu_Id == modu_Id).modu_Nombre);

      const parametros = {modu_Id: modu_Id};
      console.log("datosdatos", parametros);

        axios.post(`${apiUrl}/api/Reportes/Maquina_Uso`, parametros,{
      headers: { 'XApiKey': apiKey }
    })
    .then(Response =>{ setConsumos(Response.data.data);

        console.log("cargados?", Response.data);
        // alert("??");

    })
    .catch(error => console.error('Error al obtener consumos:', error));

    }

    const generarRepo22 = async () => {
      
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    });

    const element = document.getElementById("html-content");
    const reverso = document.getElementById("html-reverso");

    // Define the fixed dimensions for the PDF
    const pdfWidth = 190; // Width in mm
    const pdfHeight = 270; // Height in mm

    // Use a fixed file name for the PDF
    const pdfFileName = "Duca.pdf";
    const pdfRef = ref(storage, `documents/${pdfFileName}`);

    // Step 1: Generate the initial PDF
    const canvas1 = await html2canvas(element, {
      scale: 3,
      useCORS: true,
      logging: false,
    });
    const imgData1 = canvas1.toDataURL("image/jpeg");
    doc.addImage(imgData1, "JPEG", 10, 10, pdfWidth, pdfHeight);

    doc.addPage();
    const canvas2 = await html2canvas(reverso, {
      scale: 3,
      useCORS: true,
      logging: false,
    });
    const imgData2 = canvas2.toDataURL("image/jpeg");
    doc.addImage(imgData2, "JPEG", 10, 10, pdfWidth, pdfHeight);

    const initialPdfBlob = doc.output("blob");

    // Step 2: Upload the initial PDF to Firebase
    await uploadBytes(pdfRef, initialPdfBlob);
    const initialPdfUrl = await getDownloadURL(pdfRef);

    console.log("Initial PDF URL:", initialPdfUrl);

    // Step 3: Generate a QR Code with the Firebase URL
    const qrCodeDataUrl = await QRCode.toDataURL(initialPdfUrl);

    // Step 4: Replace the content of the Grid with id="imagenqr" with the QR code
    const qrContainer = document.getElementById("imagenqr");
    qrContainer.innerHTML = ""; // Clear existing content
    const qrImage = document.createElement("img");
    qrImage.src = qrCodeDataUrl;
    qrImage.style.width = "100%";
    qrImage.style.height = "100%";
    qrImage.style.objectFit = "contain";
    qrContainer.appendChild(qrImage);

    // Step 5: Regenerate the PDF with the QR code included
    const finalCanvas1 = await html2canvas(element, {
      scale: 3,
      useCORS: true,
      logging: false,
    });
    const finalImgData1 = finalCanvas1.toDataURL("image/jpeg");
    
    doc.addImage(finalImgData1, "JPEG", 10, 10, pdfWidth, pdfHeight);

    doc.addPage();
    const finalCanvas2 = await html2canvas(reverso, {
      scale: 3,
      useCORS: true,
      logging: false,
    });
    const finalImgData2 = finalCanvas2.toDataURL("image/jpeg");
    doc.addImage(finalImgData2, "JPEG", 10, 10, pdfWidth, pdfHeight);

    const finalPdfBlob = doc.output("blob");

    // Step 6: Upload the final PDF with the QR code to Firebase
    await uploadBytes(pdfRef, finalPdfBlob);
    const finalPdfUrl = await getDownloadURL(pdfRef);

    console.log("Final PDF with QR URL:", finalPdfUrl);

    // Optional: Save the final PDF locally
    doc.save("DUCA-QR.pdf");

    // Return the final PDF URL for further use
  return finalPdfUrl;
};

const generarRepo = async () => {
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    });

    const element = document.getElementById("tablapdf");
    if (!element) {
      console.error("No se encontró el elemento con id 'tablapdf'");
      return;
    }

    const elementPixelWidth = element.offsetWidth; // <-- Use this for proportions

    const pdfFileName = "ConsumoMateriales.pdf";
    const pdfRef = ref(storage, `documents/${pdfFileName}`);

    // 1. Generate the initial PDF and upload it
    await doc.html(element, {
      callback: async function (doc) {
        const pdfBlob = doc.output("blob");
        await uploadBytes(pdfRef, pdfBlob);
        const pdfUrl = await getDownloadURL(pdfRef);

        // 2. Generate QR code with the URL
        const qrCodeDataUrl = await QRCode.toDataURL(pdfUrl);

        // 3. Set the QR code in the element with id 'imagenqr'
        const qrContainer = document.getElementById("imagenqr");
        if (qrContainer) {
          qrContainer.innerHTML = "";
          const qrImage = document.createElement("img");
          qrImage.src = qrCodeDataUrl;
          qrImage.style.width = "100%";
          qrImage.style.height = "100%";
          qrImage.style.objectFit = "contain";
          qrContainer.appendChild(qrImage);
        }

        // 4. Regenerate the PDF with the QR code and upload again
        const doc2 = new jsPDF({
          orientation: "portrait",
          unit: "mm",
          format: "a4",
        });
        await doc2.html(element, {
          callback: async function (doc2) {
            const finalPdfBlob = doc2.output("blob");
            await uploadBytes(pdfRef, finalPdfBlob);
            const finalPdfUrl = await getDownloadURL(pdfRef);
            console.log("Final PDF with QR uploaded to:", finalPdfUrl);
            doc2.save("ConsumoMateriales-QR.pdf");
          },
          x: 10,
          y: 10,
          width: 190,
          windowWidth: elementPixelWidth, // <-- Use offsetWidth here too!
        });
      },
      x: 10,
      y: 10,
      width: 190,
      windowWidth: elementPixelWidth, // <-- Use offsetWidth here!
    });
};


    useEffect(() => {

            axios.get(`${apiUrl}/api/Modulos/Listar`,{
        headers: { 'XApiKey': apiKey }
        })
        .then(Response =>{ setModulos(Response.data.data);

            console.log("cargadosmod?", Response.data);
            

        })
        .catch(error => console.error('Error al obtener consumos:', error));
        
    
    }, []);

    return(


        <div>
              <Breadcrumb title="Consumo de Materiales" subtitle="Reporte" />
        
                <ParentCard>
                    <Grid container spacing={3} mb={3}>

                    <Grid item lg={6} md={12} sm={12}>
                   
                        <CustomFormLabel>Modulo</CustomFormLabel>
                        <CustomTextField
                          select
                          fullWidth
                          id="modu_Id"
                          name="modu_Id"
                          placeholder="Seleccione un Modulo"
                          value={modu_Id}
                          onChange={e => {setModu_Id(e.target.value);
                            

                          }}
                        //   value={formik.values.ofic_Id}
                        //   onChange={formik.handleChange}
                        //   onBlur={formik.handleBlur}
                        //   error={formik.touched.ofic_Id && Boolean(formik.errors.ofic_Id)}
                        //   helperText={formik.touched.ofic_Id && formik.errors.ofic_Id}
                        >
                            <MenuItem value= {0} disabled >
                                <em style={{ color: '#888' }}>Seleccione un Modulo</em>
                            </MenuItem>
                          {modulos.map((modulo) => (
                            <MenuItem key={modulo.modu_Id} value={modulo.modu_Id}>
                              {modulo.modu_Nombre}
                            </MenuItem>
                          ))}
                        </CustomTextField>
                  
                </Grid>

                  {/* <Grid item lg={4} md={4} sm={4}>
                    <CustomFormLabel>Fecha Inicio</CustomFormLabel>
                    <CustomTextField
                        fullWidth
                        name="fechaInicio"
                        id="fechaInicio"
                        type="date"
                        value={fechaInicio}
                        onChange={e => setFechaInicio(e.target.value)}
                        //onChange={formik.handleChange}
                        //error={formik.touched.fechaInicio && Boolean(formik.errors.fechaInicio)}
                        //helperText={formik.touched.fechaInicio && formik.errors.fechaInicio}
                    />
                  </Grid>

                     <Grid item lg={4} md={4} sm={4}>
                    <CustomFormLabel>Fecha Fin</CustomFormLabel>
                    <CustomTextField
                        fullWidth
                        name="fechaFin"
                        id="fechaFin"
                        type="date"
                        value={fechaFin}
                        onChange={e => setFechaFin(e.target.value)}
                        // onChange={formik.handleChange}
                        // error={formik.touched.fechaFin && Boolean(formik.errors.fechaFin)}
                        // helperText={formik.touched.fechaFin && formik.errors.fechaFin}
                    />
                  </Grid> */}

                   <Grid item lg={2} md={2} sm={2}>
                    <CustomFormLabel><br/></CustomFormLabel>
                    <Button style={{width: "100%", height: "43%"}} variant="contained" onClick={CargarConsumos} startIcon={<Search />}>
                      Buscar
                    </Button>
                  </Grid>
                   <Grid item lg={2} md={2} sm={2}>
                    <CustomFormLabel><br/></CustomFormLabel>
                    <Button style={{width: "100%", height: "43%"}} variant="contained" onClick={generarRepo} startIcon={<Search />}>
                      Imprimir
                    </Button>
                  </Grid>
        </Grid>

        <hr />
        <h4 className='text-center'>Vista Previa</h4>
        <hr />

        {/* <ParentCard> */}
                            {/* <h5 style={{ textAlign: 'center', margin: '0 0 15px 0', fontSize: '18px' }}> Previsualización Costos de Materiales No Brindados </h5> */}
                            <div id='tablapdf' style={{ position: 'relative' }}>
                                <p style={{ fontSize: '8pt', margin: '2px 0' }}>fecha y hora de impresion: {new Date().toLocaleString()} </p>
                                <br />
                                <table style={{ width: '100%', tableLayout: 'fixed', wordWrap: 'break-word', fontSize: '7pt',
                                    letterSpacing: 'normal', wordSpacing: 'normal', whiteSpace: 'normal' }} 
                                    border="3" cellPadding="2" cellSpacing="0">
                                    <tr bgcolor="#eeeeee">
                                        <th colSpan="8" style={{ background: '#1797be', color: 'white', textAlign: 'center', fontSize: '14px', border: "1px solid black" }}>
                                           REPORTE DE USO DE MAQUINAS POR MODULO <br /> <span style={{ fontSize: '12px' }}>-- IMPRESA --</span>
                                        </th>
                                        <th rowSpan="2" id="imagenqr" style={{ height: '100px', width: '100px', textAlign: 'center', backgroundColor: 'rgb(180 237 255)', border: "1px solid black", color: 'rgb(23, 151, 190)' }}>QR</th>
                                    </tr>

                                    {/* <tr bgcolor="#eeeeee">
                                        <th colSpan="9" style={{ border: "1px solid black", color: '#1797be', textAlign: 'center', fontSize: '14px' }}>PARÁMETROS DE BÚSQUEDA</th>
                                    </tr> */}
                                    <tr>
                                        <th bgcolor="#f8f8f8">Modulo:</th>
                                        <td colSpan="3">{moduSeleccionado}</td>
                                        <th bgcolor="#f8f8f8">Id Del Modulo:</th>
                                        <td colSpan="4">{(moduSeleccionado)?modulos.find(mod=>mod.modu_Nombre == moduSeleccionado).modu_Id:""}</td>
                                    </tr>

                                    <tr bgcolor="#eeeeee">
                                        <th colSpan="9" style={{ border: "1px solid black", color: '#1797be', textAlign: 'center', fontSize: '14px' }}>LISTADO DE MAQUINAS UTILIZADAS EN MODULO {(modu_Id)?moduSeleccionado.toUpperCase():''}</th>
                                    </tr>
                                </table>
                                
                                <table style={{ width: '100%', tableLayout: 'fixed', wordWrap: 'break-word', fontSize: '7pt', 
                                    letterSpacing: 'normal', wordSpacing: 'normal', whiteSpace: 'normal', marginTop: '10px' }} 
                                    border="1" cellPadding="2" cellSpacing="0">
                                    <thead>
                                        <tr bgcolor="#eeeeee">
                                            <th style={{ border: "1px solid black", background: '#1797be', color: 'white', textAlign: 'center' }}>Numero De Serie</th>
                                            <th style={{ border: "1px solid black", background: '#1797be', color: 'white', textAlign: 'center' }}>Marca</th>
                                            <th style={{ border: "1px solid black", background: '#1797be', color: 'white', textAlign: 'center' }}>Estado</th>
                                            <th style={{ border: "1px solid black", background: '#1797be', color: 'white', textAlign: 'center' }}>Fecha Habilitada</th>
                                            <th style={{ border: "1px solid black", background: '#1797be', color: 'white', textAlign: 'center' }}>Fecha Deshabilitada</th>
                                            {/* <th style={{ border: "1px solid black", background: '#1797be', color: 'white', textAlign: 'center' }}>Número Serie</th>
                                            <th style={{ border: "1px solid black", background: '#1797be', color: 'white', textAlign: 'center' }}>Marca</th>
                                            <th style={{ border: "1px solid black", background: '#1797be', color: 'white', textAlign: 'center' }}>Precio Promedio</th>
                                            <th style={{ border: "1px solid black", background: '#1797be', color: 'white', textAlign: 'center' }}>Total Material</th>
                                            <th style={{ border: "1px solid black", background: '#1797be', color: 'white', textAlign: 'center' }}>Porcentaje</th>
                                            <th style={{ border: "1px solid black", background: '#1797be', color: 'white', textAlign: 'center' }}>Observaciones</th> */}
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {consumos.map((item, index) => (
                                            <tr key={index}>
                                                
                                                <td style={{ border: "1px solid black" }}>{item.maqu_NumeroSerie}</td>
                                                <td style={{ border: "1px solid black" }}>{item.marq_Nombre}</td>
                                                <td style={{ border: "1px solid black" }}>{(item.enUso)?"En Uso": "No En Uso"}</td>
                                                <td style={{ border: "1px solid black" }}>{item.deshabilitada}</td>
                                                <td style={{ border: "1px solid black" }}>{item.habilitada}</td>


                                                
                                                {/* <td style={{ border: "1px solid black", textAlign: 'right' }}>{item.totalMaterial?.toFixed(2)}</td> */}
                                                {/* <td style={{ border: "1px solid black", textAlign: 'center' }}>{item.maqu_Id}</td>
                                                <td style={{ border: "1px solid black" }}>{item.maqu_NumeroSerie}</td>
                                                <td style={{ border: "1px solid black" }}>{item.marq_Nombre}</td>
                                                <td style={{ border: "1px solid black", textAlign: 'right' }}>{item.porcentajeMaterial?.toFixed(2)}%</td>
                                                <td style={{ border: "1px solid black" }}>{item.mahi_Observaciones}</td> */}
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                                  <div
                                                    style={{
                                                        position: 'absolute',
                                                        top: '50%',
                                                        
                                                        transform: 'translate(-50%, -50%)',
                                                        width: '100%',
                                                        height: 'auto',
                                                        opacity: 0.2,
                                                        pointerEvents: 'none',
                                                        display: 'flex',
                                                        alignItems: 'center',
                                                        justifyContent: 'center',
                                                        transform: 'scale(2)'
                                                        
                                                    }}
                                                    
                                                >
                                                    <LogoAzul style={{maxWidth: '100%', maxHeight: '100%'}}/>
                                                    {/* <img src={LogoAzulPNG} alt="" style={{maxWidth: '100%', maxHeight: '100%'}} /> */}
                                                    {/* <img
                                                      src={logoAzulDataUrl}
                                                      alt="Logo Azul"
                                                      
                                                    /> */}
                                                    
                                                </div>
                                <div style={{ marginTop: '20px', fontSize: '9pt', textAlign: 'right' }}>
                                    <p><strong>Fecha de generación:</strong> {new Date().toLocaleDateString()} {new Date().toLocaleTimeString()}</p>
                                </div>
                            </div>
                        {/* </ParentCard> */}
        {/* <Table>
          <TableHead>
            <TableRow>
              <TableCell>Material</TableCell>
              <TableCell>Total</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {consumos.map((item) => (
              <TableRow key={item.mate_Descripcion}>
                <TableCell>{item.mate_Descripcion}</TableCell>
                <TableCell>{item.totalMaterial}</TableCell>

              </TableRow>
            ))}
          </TableBody>
        </Table> */}
                </ParentCard>
            </div>
    );

}

export default MaquinaUsoReporte;

